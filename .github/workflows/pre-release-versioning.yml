name: Pre Release Versioning

on:
  push:
    branches:
      - develop

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_branch: ${{ steps.set-release-branch.outputs.release_branch }}
      release_tag: ${{ steps.get-release-tag.outputs.release_tag }}
      domain_slug: ${{ steps.get-release-tag.outputs.domain_slug }}

    steps:
      - name: Create GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.RUBRION_APP_ID }}
          private-key: ${{ secrets.RUBRION_APP_SECRET }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm

      - name: Install dependencies
        run: |
          npm ci
          npm install --save-dev @release-it/keep-a-changelog auto-changelog

      - name: Get Pre-Release Version
        id: get-release-tag
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          # Get the latest commit message (excluding any previous release commits)
          LATEST_COMMIT=$(git log -1 --pretty=%B --grep="chore(release):" --invert-grep)
          echo "Latest commit message: $LATEST_COMMIT"
          
          # Check if it's a commit type that should be skipped
          LATEST_COMMIT_TYPE=$(echo "$LATEST_COMMIT" | grep -oP '^(docs|style|test|build|ci|chore)(?:\(.*\))?:' | head -1 || echo "")

          if [[ -n "$LATEST_COMMIT_TYPE" ]]; then
            echo "Latest commit is of type: $LATEST_COMMIT_TYPE, which doesn't require version bump."
            echo "No new release detected."
            exit 0
          fi

          # Check if this commit should trigger a version bump
          COMMIT_TYPE=$(echo "$LATEST_COMMIT" | grep -oP '^(feat|fix|refactor|perf)(?:\(.*\))?:' | head -1 || echo "")
          BREAKING_CHANGE=$(echo "$LATEST_COMMIT" | grep -i "BREAKING CHANGE" || echo "")
          
          if [[ -z "$COMMIT_TYPE" && -z "$BREAKING_CHANGE" ]]; then
            echo "No version bump trigger found in latest commit."
            echo "No new release detected."
            exit 0
          fi

          echo "Commit triggers version bump. Running release-it to get version..."
          
          # Run release-it in dry-run mode to get the next version
          RELEASE_OUTPUT=$(npx release-it --ci --dry-run --preRelease=beta --git.requireBranch=develop 2>&1)
          echo "Release-it dry-run output:"
          echo "$RELEASE_OUTPUT"
          
          # Extract version from the release-it output using multiple patterns
          # Pattern 1: From "ðŸš€ Let's release rubrion-frontend-template (1.0.0...1.1.0-beta.0)"
          RELEASE_TAG=$(echo "$RELEASE_OUTPUT" | grep -oP 'ðŸš€ Let.s release.*\([^)]*\.\.\.[^)]*\)' | grep -oP '[0-9]+\.[0-9]+\.[0-9]+(-beta\.[0-9]+)?(?=\))' | tail -1 || echo "")
          
          # Pattern 2: From lines containing version numbers after "release"
          if [ -z "$RELEASE_TAG" ]; then
            RELEASE_TAG=$(echo "$RELEASE_OUTPUT" | grep -i "release" | grep -oP '[0-9]+\.[0-9]+\.[0-9]+(-beta\.[0-9]+)?' | head -1 || echo "")
          fi
          
          # Pattern 3: From any line containing a semantic version with beta
          if [ -z "$RELEASE_TAG" ]; then
            RELEASE_TAG=$(echo "$RELEASE_OUTPUT" | grep -oP '[0-9]+\.[0-9]+\.[0-9]+-beta\.[0-9]+' | head -1 || echo "")
          fi
          
          # Pattern 4: From any line containing a semantic version
          if [ -z "$RELEASE_TAG" ]; then
            RELEASE_TAG=$(echo "$RELEASE_OUTPUT" | grep -oP '[0-9]+\.[0-9]+\.[0-9]+' | head -1 || echo "")
            if [ -n "$RELEASE_TAG" ]; then
              # Add beta suffix if not present
              RELEASE_TAG="${RELEASE_TAG}-beta.0"
            fi
          fi
          
          if [ -z "$RELEASE_TAG" ]; then
            echo "Could not extract version from release-it output."
            echo "Full output for debugging:"
            echo "$RELEASE_OUTPUT"
            echo "No new release detected."
            exit 0
          fi

          # Remove pre-release suffix for branch name
          RELEASE_BASE=$(echo "$RELEASE_TAG" | sed 's/-beta\.[0-9]\+//')
          {
            echo "release_tag<<EOF"
            echo "$RELEASE_TAG"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          {
            echo "domain_slug<<EOF"
            echo "$(echo "$RELEASE_TAG" | tr '[:upper:]' '[:lower:]')"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          echo "Next release version: $RELEASE_TAG"

      - name: Create & Push New Release Branch
        if: steps.get-release-tag.outputs.release_tag != ''
        id: set-release-branch
        run: |
          RELEASE_TAG="${{ steps.get-release-tag.outputs.release_tag }}"
          # Remove pre-release suffix for branch naming
          RELEASE_BASE=$(echo "$RELEASE_TAG" | sed 's/-beta\.[0-9]\+//')
          RELEASE_BRANCH="release/v$RELEASE_BASE"
          # Ensure we branch off develop
          git checkout develop
          git checkout -b "$RELEASE_BRANCH" || git checkout "$RELEASE_BRANCH"
          git push --set-upstream origin "$RELEASE_BRANCH"
          {
            echo "release_branch<<EOF"
            echo "$RELEASE_BRANCH"
            echo "EOF"
          } >> $GITHUB_OUTPUT
